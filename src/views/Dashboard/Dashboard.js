import React from "react";
import { makeStyles } from "@material-ui/core/styles";
import Card from "components/Card/Card.js";
import CardBody from "components/Card/CardBody.js";

import styles from "assets/jss/material-dashboard-react/views/dashboardStyle.js";
import Muted from "../../components/Typography/Muted";

const useStyles = makeStyles(styles);

export default function Dashboard() {
  const classes = useStyles();
  return (
    <div>
      <Card>
        <CardBody>
          <h2 className={classes.cardTitle}>Добро пожаловать!</h2>
          <Muted>
            <h6 className={classes.cardSubtitle}>
              Давай расскажем что это такое и как этим пользоваться
            </h6>
          </Muted>
          <p>
            Эта система - MVP того, как мы себе представляем реализацию
            электронного оборота коносаментов на основе сети Блокчейн. Вся
            информация о самих коносаментах хранится в системе с шифрованием
            информации о грузе.
          </p>
          <p>
            Каждая транзакция - это перемещение коносамента от экспортера (кто
            отправляет груз) к импортеру (кто принимает груз). Коносаменты,
            которыми сейчас владеет пользователь, можно посмотреть в разделе
            Коносаменты, там же можно передать права на владение коносаментом
            получателю груза
          </p>
          <p>
            Раздел Блокчейн сеть показывает все активные ноды распределенного
            реестра, который выполняет роль децентрализованного хранилища цепи
            данных
          </p>
          <p>
            История транзакций расскажет о том, какие транзакции были совершены.
            Именно там можно просмотреть аггрегированные данные с блокчейн сети
          </p>
          <p>
            Для теста системы на аккаунте компании-отправителя (Логин:
            trans.info@tr.company) есть несколько коносаментов, которые
            адресованы компании-получателю (Логин: sud.mor@sudo.ru). Нужно
            попробовать перенести коносаменты в детализации коносаментов у
            отправителя. После этого коносамент станет недоступным для него и
            будет необратимо передан получателю (блокчейн сеть зарегистрирует
            транзакцию. Получатель коносамент уже перенести не может, поскольку
            является конечным лицом, куда он должен прийти
          </p>
        </CardBody>
        <CardBody>
          <h2 className={classes.cardTitle}>Техническая реализация</h2>
          <Muted>
            <h6 className={classes.cardSubtitle}>
              Тут мы немного расскажем о том, как это работает
            </h6>
          </Muted>
          <p>
            Эта система хранит в себе транзакции в распределенном хранилище -
            блокчейн нодах
          </p>
          <p>
            Блокчейн здесь нужен для хранения и подтверждения транзакций, причем
            проихсодит это не на одном сервере, а на распределенном реестре
          </p>
          <p>
            Распределенный реестр - это децентрализованная сеть хранилищ
            неизменямых цепочек данных. Любое событие о передвижении
            коносаментов отражаетс именно там и хранится на разных приложениях,
            а значит в разных странах, городах, под контролем разных и
            независимых организаций.
          </p>
          <p>
            Реализация блокчейна в данном примере реализована весьма просто с
            точки зрения шифрования и безопасности: данные о грузе шифруются с
            помощью AES, ключ от которого доступен только компании отправителю.
            Хэширование проихсодит с помощью SHA-256 алгоритма. Подпись блоков
            примитивна и основана на секрете, который знает система и ноды
            блокчейна, данную схему можно модифицировать с помощью RSA
            модифицированного алгоритма и генерировать токен доступа на основе
            приватного ключа
          </p>
        </CardBody>
        <CardBody>
          <h2 className={classes.cardTitle}>Стек разработки</h2>
          <Muted>
            <h6 className={classes.cardSubtitle}>
              Какие технологии мы применили, чтобы это заработало
            </h6>
          </Muted>
          <p>
            Frontend сделан в основном на React с использованием дизайн системы
            Material UI. за роутинг отвечает React DOM Router В качестве линтера
            использован EsLint, работа с внешним миром через стандартное Fetch
            API. Форма входа была сверстана на HTML+CSS
          </p>
          <p>
            Backend работает всецело на Java+Spring, БД PostgreSQL, ORM
            Hibernate. Все службы спринга находятся на чутком мониторинге Spring
            boot admin. Java была выбрана не случайно, мы считаем, что она
            идеально подходит для крупных бинес-финтех задач, а так же
            максимально стабильна. К тому же в текущих реалиях Spring Framework
            позволяет писать приложения довольно быстро, что неоценимый плюс в
            рамках ускоренной разработки и хакатоне в том числе.
          </p>
          <p>
            Инфраструктурно все службы запущены на Docker Swarm кластере, ноды
            блокчейна изолированы друг от друга, но находятся в одной сети для
            обмена данными. Так же ноды используют разные базы данных для
            работы. Проксируются запросы по поддоменам с помощью Nginx в режиме
            Reverse Proxy. Хостинг фронта происходит с помощью Spring Web MVC,
            за безопасность отвечает Spring Security
          </p>
        </CardBody>
      </Card>
    </div>
  );
}
